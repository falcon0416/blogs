(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{464:function(t,a,v){"use strict";v.r(a);var _=v(2),s=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"变量-主要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量-主要"}},[t._v("#")]),t._v(" 变量 （主要）")]),t._v(" "),a("h3",{attrs:{id:"为什么要使用变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用变量"}},[t._v("#")]),t._v(" 为什么要使用变量")]),t._v(" "),a("ul",[a("li",[t._v("因为编程中会存在很多数据操作，多次进行数据操作很麻烦，而且会出错")])]),t._v(" "),a("h3",{attrs:{id:"什么是变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是变量"}},[t._v("#")]),t._v(" 什么是变量")]),t._v(" "),a("ul",[a("li",[t._v("本质上就是保存数据的容器，用来方便进行数据操作")])]),t._v(" "),a("h3",{attrs:{id:"变量怎么操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量怎么操作"}},[t._v("#")]),t._v(" 变量怎么操作")]),t._v(" "),a("ul",[a("li",[t._v("变量的声明操作\n"),a("ul",[a("li",[t._v("格式： var 变量名; - 注意：声明变量必须设置 var！！！\n")])])])]),t._v(" "),a("h3",{attrs:{id:"变量的赋值操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的赋值操作"}},[t._v("#")]),t._v(" 变量的赋值操作")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("格式：var 变量名; 变量名 = 数据；")])]),t._v(" "),a("li",[a("p",[t._v("同时进行声明和赋值操作")])]),t._v(" "),a("li",[a("p",[t._v("格式： var 变量名 = 数据;")])]),t._v(" "),a("li",[a("p",[t._v("合并多个变量的声明或赋值")]),t._v(" "),a("ul",[a("li",[t._v("格式： var 变量名 1 = 数据 1, 变量名 2， 变量名 3 = 数据; // ....")])])]),t._v(" "),a("li",[a("p",[t._v("操作变量实际上就是操作内部保存的数据。")])])]),t._v(" "),a("h2",{attrs:{id:"基本数据类型-5-个"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型-5-个"}},[t._v("#")]),t._v(" 基本数据类型 5 个")]),t._v(" "),a("h3",{attrs:{id:"数值类型-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值类型-number"}},[t._v("#")]),t._v(" 数值类型 number")]),t._v(" "),a("ul",[a("li",[t._v("组成\n"),a("ul",[a("li",[t._v("基本数值：生活中的整数和小数")]),t._v(" "),a("li",[t._v("特殊数值：NaN - 非数值")])])]),t._v(" "),a("li",[t._v("极限值（了解，不需要记忆）\n"),a("ul",[a("li",[t._v("无穷和无限的概念只在生活中存在，是一种理想化的情况")]),t._v(" "),a("li",[t._v("计算机中的编程语言不可能表示出无限的数值位数，是具有最大和最小值的")]),t._v(" "),a("li",[t._v("Number.MAX_VALUE 超出了这个最大表示范围后出现 Infinity")]),t._v(" "),a("li",[t._v("Number.MIN_VALUE 正数的最小精度")])])])]),t._v(" "),a("h3",{attrs:{id:"字符串类型-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型-string"}},[t._v("#")]),t._v(" 字符串类型 string")]),t._v(" "),a("ul",[a("li",[t._v("特殊的标识方式\n"),a("ul",[a("li",[t._v("成对的英文半角的单引号或双引号")]),t._v(" "),a("li",[t._v("推荐使用单引号进行标识")])])]),t._v(" "),a("li",[t._v("转义符的使用\n"),a("ul",[a("li",[t._v("转义符的符号： 反斜线 \\")]),t._v(" "),a("li",[t._v("作用：\n"),a("ul",[a("li",[t._v("将特殊字符转换为普通字符")]),t._v(" "),a("li",[t._v("将普通字符转换为特殊字符")])])])])])]),t._v(" "),a("h3",{attrs:{id:"布尔类型-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型-boolean"}},[t._v("#")]),t._v(" 布尔类型 boolean")]),t._v(" "),a("p",[t._v("组成： true 和 false")]),t._v(" "),a("ul",[a("li",[t._v("用来表示某个结果的真 true 或假 false")])]),t._v(" "),a("h3",{attrs:{id:"undefined-未定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined-未定义"}},[t._v("#")]),t._v(" undefined 未定义")]),t._v(" "),a("ul",[a("li",[t._v("defined 定义")]),t._v(" "),a("li",[t._v("出现在某些操作的默认值中\n"),a("ul",[a("li",[t._v("当变量声明还未赋值时，默认值为 undefined")]),t._v(" "),a("li",[t._v("后面学习的其他语法中也存在默认值为 undefined 的情况\n"),a("ul",[a("li",[t._v("会在后面的内容中依次讲解，最后一天进行小结")])])])])])]),t._v(" "),a("h3",{attrs:{id:"null-空"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-空"}},[t._v("#")]),t._v(" null 空")]),t._v(" "),a("p",[t._v("当我们希望主动的将变量中保存的数据清空时，设置为 null 即可")]),t._v(" "),a("h2",{attrs:{id:"类型检测操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型检测操作"}},[t._v("#")]),t._v(" 类型检测操作")]),t._v(" "),a("h3",{attrs:{id:"typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("使用方式：")]),t._v(" "),a("ul",[a("li",[t._v("typeof 数据")]),t._v(" "),a("li",[t._v("typeof(数据)")])])]),t._v(" "),a("li",[a("p",[t._v("两种方式检测结果没有区别，个人推荐第一种")])]),t._v(" "),a("li",[a("p",[t._v("结果：")]),t._v(" "),a("ul",[a("li",[t._v("字符串形式的类型名称，例如'string' 'number'。。")]),t._v(" "),a("li",[t._v("问题：对 null 的检测结果不准确，是'object'，后续会介绍其他方式")])])])]),t._v(" "),a("h2",{attrs:{id:"变量的交换操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的交换操作"}},[t._v("#")]),t._v(" 变量的交换操作")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需求：交换str1和str2中保存的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是第一个变量的内容"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是第二个变量的内容"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实现方式，设置一个用来中转数据的变量即可")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"常用的输出方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的输出方式"}},[t._v("#")]),t._v(" 常用的输出方式")]),t._v(" "),a("ul",[a("li",[t._v("alert() 普通的弹出提示框")]),t._v(" "),a("li",[t._v("console.log() 在控制台中输出内容，非常常用\n"),a("ul",[a("li",[t._v("console.log(数据 1, 数据 2, 数据 3.........);")])])]),t._v(" "),a("li",[t._v("confirm() 确认提示框\n"),a("ul",[a("li",[t._v("根据用户选择的确定和取消返回布尔值 true 或 false")])])]),t._v(" "),a("li",[t._v("prompt() 输入提示框\n"),a("ul",[a("li",[t._v("点击确定后，会将输入框中的内容返回，点击取消为空 null")])])]),t._v(" "),a("li",[t._v("document.write() 在文档中输出内容（输出位置为 body 标签内）\n"),a("ul",[a("li",[t._v("设置的 html 标签结构，会被生成为真正的标签")])])])]),t._v(" "),a("h2",{attrs:{id:"数据类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换"}},[t._v("#")]),t._v(" 数据类型转换")]),t._v(" "),a("h3",{attrs:{id:"数值类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值类型"}},[t._v("#")]),t._v(" 数值类型")]),t._v(" "),a("ul",[a("li",[t._v("转换失败结果均为 NaN")]),t._v(" "),a("li",[t._v("强制转换：\n"),a("ul",[a("li",[t._v("Number(数据);")]),t._v(" "),a("li",[t._v("parseInt()\n"),a("ul",[a("li",[t._v("将数据转换为整数")])])]),t._v(" "),a("li",[t._v("parseFloat()\n"),a("ul",[a("li",[t._v("将数据转换为小数")])])])])]),t._v(" "),a("li",[t._v("隐式转换：\n"),a("ul",[a("li",[t._v("+- 俗称正负号")]),t._v(" "),a("li",[t._v("+-*/%")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("注意：转换失败结果均为 NaN")])]),t._v(" "),a("h3",{attrs:{id:"字符串类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型"}},[t._v("#")]),t._v(" 字符串类型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("指的是将其他类型转换为字符串类型")])]),t._v(" "),a("li",[a("p",[t._v("强制转换：")]),t._v(" "),a("ul",[a("li",[t._v("数据.toString()")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("注意：null 和 undefined 无法使用 数据.toString() 的方式")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("String(数据)")])]),t._v(" "),a("li",[a("p",[t._v("隐式转换(字符串拼接)：")]),t._v(" "),a("ul",[a("li",[t._v("字符串和任意类型进行+操作，最终结果都是字符串\n"),a("ul",[a("li",[t._v("通常类型转换时使用''进行操作")])])])])])]),t._v(" "),a("blockquote",[a("p",[t._v("注意：任何数据类型与字符串相加 都会变成字符串拼接")]),t._v(" "),a("p",[t._v("包括复杂数据类型 array、 object")])]),t._v(" "),a("h3",{attrs:{id:"布尔类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型"}},[t._v("#")]),t._v(" 布尔类型")]),t._v(" "),a("ul",[a("li",[t._v("转换方式： Boolean(数据)")])]),t._v(" "),a("blockquote",[a("p",[t._v("只需掌握转换结果为 false 的 6 个值即可：")]),t._v(" "),a("p",[t._v("0")]),t._v(" "),a("p",[t._v("NaN")]),t._v(" "),a("p",[t._v("'' "),a("code",[t._v("//空字符串")])]),t._v(" "),a("p",[t._v("null")]),t._v(" "),a("p",[t._v("undefined")]),t._v(" "),a("p",[t._v("false")])])])}),[],!1,null,null,null);a.default=s.exports}}]);