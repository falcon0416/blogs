(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{463:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-操作符"}},[s._v("#")]),s._v(" 1 操作符")]),s._v(" "),t("h3",{attrs:{id:"算术操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算术操作符"}},[s._v("#")]),s._v(" 算术操作符")]),s._v(" "),t("h4",{attrs:{id:"自增操作符、自减操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自增操作符、自减操作符"}},[s._v("#")]),s._v(" 自增操作符、自减操作符")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ++ --")]),s._v("\n")])])]),t("blockquote",[t("p",[s._v("需要注意的是后++和后--，在和其他算术运算符一起操作时 是先原值操作在下次操作在再自身加减")]),s._v(" "),t("p",[s._v("口诀：")]),s._v(" "),t("ul",[t("li",[s._v("++放在变量"),t("strong",[s._v("前面")]),s._v("，什么时候计算++？先算++，在算整个运算；")]),s._v(" "),t("li",[s._v("++放在变量后面，什么时候计算++？先算整个运算，再算++；")])])]),s._v(" "),t("h4",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")]),s._v(" + - * / %")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1.常规操作：Number类型")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// var a = 10;")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// var b = 3;")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// + - / * %")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// var c = a + b;")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 10对3取余数；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// var c = 10 % 3;")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(c);")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2.非常规：字符串、Boolean、null、undefined；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 字符串 遇见 +，把左右的数据类型 转化为字符串")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 字符串 + 字符串 ：字符串拼接；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// var a = 10 + "10";')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// var a = true + "10";')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(a, typeof a);")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 运算：从左到右运算；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// var a = 10 + 10 + "10";')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(a);")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只要字符串不是遇见+，遇见-*/% ，字符串会 隐式 转化 Number类型；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// var a = 10 - "10";')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(a, typeof a);")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// var a = 10 - "我";')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(a, typeof a);")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2.其他(排出string类型外)：true null undefined")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 隐式转化：转为数字类型；")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// var a = false + 10;")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(a);")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// var a = null + 10;")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(a);")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 NaN")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// var a = undefined + 10;")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// console.log(a);")]),s._v("\n")])])]),t("h3",{attrs:{id:"比较操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较操作符"}},[s._v("#")]),s._v(" 比较操作符")]),s._v(" "),t("p",[s._v("比较操作符的就是比较两个数据，操作符号有:")]),s._v(" "),t("p",[t("code",[s._v("> < >= <=")]),s._v(" 运算结果是 布尔 类型")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" 和"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" 是比较两个数据是否不相等的    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" 同时比较值和类型\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" 是用来比较两个数据是否相等的   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" 不仅比较两个数据的值，还比较数据的类型\n")])])]),t("h3",{attrs:{id:"逻辑操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑操作符"}},[s._v("#")]),s._v(" 逻辑操作符")]),s._v(" "),t("h4",{attrs:{id:"逻辑与"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑与"}},[s._v("#")]),s._v(" 逻辑与&&")]),s._v(" "),t("ul",[t("li",[s._v("两个条件都为 true 结果为 true 否者为 false")]),s._v(" "),t("li",[s._v("逻辑短路：当第一个值为 false 将不再判断第二个值 直接返回第一个值")])]),s._v(" "),t("h4",{attrs:{id:"逻辑或"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑或"}},[s._v("#")]),s._v(" 逻辑或 ||")]),s._v(" "),t("ul",[t("li",[s._v("只要有一个条件为 true 结果为 true，两个都是 false 才是 false")]),s._v(" "),t("li",[s._v("逻辑短路：当第一个值为 true 将不再判断第二个值 直接返回第一个值")])]),s._v(" "),t("h4",{attrs:{id:"逻辑非"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑非"}},[s._v("#")]),s._v(" 逻辑非")]),s._v(" "),t("ul",[t("li",[s._v("把 true 变 false 把 false 变 true")])]),s._v(" "),t("blockquote",[t("p",[s._v("注意：逻辑非的优先级 仅次于（） 和 [ ] 与 前两个逻辑操作符一起用的时候需要注意")])]),s._v(" "),t("h3",{attrs:{id:"赋值操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#赋值操作符"}},[s._v("#")]),s._v(" 赋值操作符")]),s._v(" "),t("h4",{attrs:{id:"-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[s._v("#")]),s._v(" = += -= *= /= %=")]),s._v(" "),t("ul",[t("li",[s._v("+= 的作用是简写加法 a += 2; // 相当于是 a = a + 2; 就是一个简写的语法")]),s._v(" "),t("li",[s._v("-= *= /= %= 除了运算规则不同，作用是一样的，都是简写")])]),s._v(" "),t("h3",{attrs:{id:"操作的优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作的优先级"}},[s._v("#")]),s._v(" 操作的优先级")]),s._v(" "),t("ol",[t("li",[s._v("第一优先级： [] . ()")]),s._v(" "),t("li",[s._v("第二优先级： ++ -- !")]),s._v(" "),t("li",[s._v("第三优先级： * / %")]),s._v(" "),t("li",[s._v("第四优先级： + -")]),s._v(" "),t("li",[s._v("第五优先级： > >= < <=")]),s._v(" "),t("li",[s._v("第六优先级： == != === !==")]),s._v(" "),t("li",[s._v("第七优先级： &&")]),s._v(" "),t("li",[s._v("第八优先级： ||")]),s._v(" "),t("li",[s._v("第九优先级： = += -= *= /= %=")])]),s._v(" "),t("p",[s._v("上面是具体的优先级，但是平时我们不会把很多的操作符放在一起运算，所以我们大致记住")]),s._v(" "),t("ol",[t("li",[s._v("括号先算")]),s._v(" "),t("li",[s._v("其次算算术")]),s._v(" "),t("li",[s._v("再次算比较")]),s._v(" "),t("li",[s._v("然后算逻辑")]),s._v(" "),t("li",[s._v("最后算赋值")])]),s._v(" "),t("h2",{attrs:{id:"_2-流程控制-三个名词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-流程控制-三个名词"}},[s._v("#")]),s._v(" 2 流程控制-三个名词")]),s._v(" "),t("ul",[t("li",[s._v("表达式：有返回结果；"),t("strong",[s._v("在浏览器后台可以直接敲表达式，回车返回的就是该表达式的结果；")])]),s._v(" "),t("li",[s._v("语句：有思考在里面的表达式；思考主要是告诉浏览器要做什么事情；")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("结构：")]),s._v(" "),t("ul",[t("li",[s._v("顺序结构：从上到下执行的代码就是顺序结构 程序默认就是由上到下顺序执行的")])]),s._v(" "),t("ul",[t("li",[s._v("分支："),t("strong",[s._v("不同的情况，走不同的分支 ；")])]),s._v(" "),t("li",[s._v("循环结构：要求一个流程要有"),t("strong",[s._v("重复的思想")]),s._v("在里面；")])])])]),s._v(" "),t("h2",{attrs:{id:"_3-分支结构-重要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-分支结构-重要"}},[s._v("#")]),s._v(" 3 分支结构（重要）")]),s._v(" "),t("p",[s._v("这就使用到了分支结构，分支结构分为三个大类")]),s._v(" "),t("ul",[t("li",[s._v("if 结构")]),s._v(" "),t("li",[s._v("switch-case 结构")]),s._v(" "),t("li",[s._v("三元表达式")])]),s._v(" "),t("h3",{attrs:{id:"if-结构-常用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-结构-常用"}},[s._v("#")]),s._v(" if 结构 （常用）")]),s._v(" "),t("p",[s._v("单个 if 结构：解决的一个分支的判断问题")]),s._v(" "),t("p",[s._v("if-else： if-else 结构，解决两个分支的判断问题")]),s._v(" "),t("p",[s._v("if-else-if：if-else-if 结构，解决多分支的判断问题")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   当条件表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("的结果是 "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" 时执行的代码\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  当条件表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("的结果是 "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" 时执行的代码\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  当条件表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("的结果是 "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" 时执行的代码\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 中间可以继续写多个判断")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  多个条件表达式的结果都是 "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" 的时候执行的代码\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//例如: 判断一下一个人的性别是不是男的,如果是男的，让他去男厕所，如果是女的，让他去女厕所 ， 否则不让他上厕所")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" gender "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("prompt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'请输入性别'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gender "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'男'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'请去男厕所'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gender "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'女'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'请去女厕所'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'你个不男不女的家伙，我们这里没有你能上的厕所，去别处吧'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("blockquote",[t("p",[s._v("注意：在 if-else-if 连着多个判断时 最终只会进到一个分支中")])]),s._v(" "),t("h3",{attrs:{id:"switch-case-结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#switch-case-结构"}},[s._v("#")]),s._v(" switch-case 结构")]),s._v(" "),t("p",[s._v("switch-case 结构主要用于多个固定值之间的判断")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//例如： 判断一下一个人的性别是不是男的,如果是男的，让他去男厕所，如果是女的，让他去女厕所 ，如果是人妖，去人妖专用厕所，如果都不是，打晕送走")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" gender "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("prompt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"请输入性别"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gender"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"男"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"请去男厕所"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"女"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"请去女厕所"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"人妖"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"请去人妖专用厕所"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"净给我添乱，打晕送走"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("blockquote",[t("p",[s._v("值得注意的是：这个结构里面的 break 并不是必须的，如果两个 case 之间没有 break ，执行完了一个 break 之后，会继续执行下面的 case 的代码")])]),s._v(" "),t("h3",{attrs:{id:"三元表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三元表达式"}},[s._v("#")]),s._v(" 三元表达式")]),s._v(" "),t("p",[s._v("三元表达式的使用是简写 if-else 结构 属于表达式")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" 表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 表达式"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个表达式会先执行表达式1，判断其结果是true还是false，如果是true，则执行表达式2，")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//然后将表达式2的执行结果作为整个三元表达式的结果，如果表达式1的结果是false，则执行表达式3，")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//并表达式3的结果作为整个三元表达式的结果")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//例如： 求二个数字中谁更大")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" max "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("blockquote",[t("p",[s._v("总结")]),s._v(" "),t("p",[s._v("1.在我们需要判断的时候，就可以使用分支结构")]),s._v(" "),t("p",[s._v("2.if 判断用法很多，switch-case 却只能判断固定值")]),s._v(" "),t("p",[s._v("3.三元表达式就是 if-else 的简写，将来可以把代码写得更简洁")])]),s._v(" "),t("h2",{attrs:{id:"_4-循环结构-重要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-循环结构-重要"}},[s._v("#")]),s._v(" 4 循环结构（重要）")]),s._v(" "),t("h3",{attrs:{id:"for-循环-常用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-循环-常用"}},[s._v("#")]),s._v(" for 循环(常用)")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("初始化表达式"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 条件表达式"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 自增表达式"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  循环体"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//初始化表达式只是开始用到 后期反复执行。。。条件--\x3e循环体--\x3e自增--\x3e条件。。。。。")]),s._v("\n")])])]),t("p",[s._v("执行过程：")]),s._v(" "),t("ol",[t("li",[s._v("执行初始化表达式")]),s._v(" "),t("li",[s._v("执行条件表达式")]),s._v(" "),t("li",[s._v("如果条件表达式的结果为 false,结束循环，继续执行循环后面的代码")]),s._v(" "),t("li",[s._v("如果条件表达式的结果为 true，执行循环体")]),s._v(" "),t("li",[s._v("执行自增表达式")]),s._v(" "),t("li",[s._v("重复 2~5 的步骤，直到条件表达式的结果为 false，结束循环")])]),s._v(" "),t("h3",{attrs:{id:"while-循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#while-循环"}},[s._v("#")]),s._v(" while 循环")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件表达式"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  循环体"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 循环体就是重复执行的代码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//可以做无限循环（true）就可以实现")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//需要结束时加break")]),s._v("\n")])])]),t("p",[s._v("执行过程：")]),s._v(" "),t("ol",[t("li",[s._v("先执行条件表达式，得到一个布尔类型的结果")]),s._v(" "),t("li",[s._v("如果表达式的结果为 false,循环结束，执行循环后面的代码")]),s._v(" "),t("li",[s._v("如果表达式的结果为 true，执行循环体")]),s._v(" "),t("li",[s._v("执行条件表达式，得到一个布尔类型的结果")]),s._v(" "),t("li",[s._v("重复 2~4 的过程，直到表达式结果为 false，结束循环")])]),s._v(" "),t("h3",{attrs:{id:"do-while-循环-补充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#do-while-循环-补充"}},[s._v("#")]),s._v(" do-while 循环(补充)")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  循环体"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件表达式"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("执行过程")]),s._v(" "),t("ol",[t("li",[s._v("先执行循环体")]),s._v(" "),t("li",[s._v("执行条件表达式")]),s._v(" "),t("li",[s._v("如果条件表达式结果为 false，结束循环")]),s._v(" "),t("li",[s._v("如果条件表达式结果为 true，执行循环体")]),s._v(" "),t("li",[s._v("重复 2~4 的步骤，直到条件表达式结果为 false，结束循环")])]),s._v(" "),t("h3",{attrs:{id:"break-和-continue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#break-和-continue"}},[s._v("#")]),s._v(" break 和 continue")]),s._v(" "),t("ol",[t("li",[s._v("break 用于结束整个循环")]),s._v(" "),t("li",[s._v("continue 用于结束整个循环中的一次")]),s._v(" "),t("li",[s._v("break 和 continue 后面的代码都不会执行")])])])}),[],!1,null,null,null);t.default=e.exports}}]);